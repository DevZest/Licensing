//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevZest.Licensing {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DevZest.Licensing.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not verify signed license..
        /// </summary>
        internal static string Exception_CanNotVerifySignedLicense {
            get {
                return ResourceManager.GetString("Exception_CanNotVerifySignedLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not have duplicate name in LicenseItemCollection. Name={0}..
        /// </summary>
        internal static string Exception_DuplicateLicenseItemName {
            get {
                return ResourceManager.GetString("Exception_DuplicateLicenseItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Name property of LicenseItem object can not be null or empty string when added to License. Index={0}..
        /// </summary>
        internal static string Exception_EmptyLicenseItemName {
            get {
                return ResourceManager.GetString("Exception_EmptyLicenseItemName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The returned LicenseProviderResult cannot be empty..
        /// </summary>
        internal static string Exception_EmptyLicenseProviderResult {
            get {
                return ResourceManager.GetString("Exception_EmptyLicenseProviderResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The object is frozen and cannot be modified..
        /// </summary>
        internal static string Exception_FrozenAccess {
            get {
                return ResourceManager.GetString("Exception_FrozenAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license key &quot;{0}&quot; is invalid..
        /// </summary>
        internal static string Exception_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("Exception_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided loader type must be IAssemblyLicenseLoader..
        /// </summary>
        internal static string Exception_InvalidLoaderType {
            get {
                return ResourceManager.GetString("Exception_InvalidLoaderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license must be frozen before validate..
        /// </summary>
        internal static string Exception_LicenseMustBeFrozenBeforeValidate {
            get {
                return ResourceManager.GetString("Exception_LicenseMustBeFrozenBeforeValidate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The private key for product &quot;{0}&quot; is null..
        /// </summary>
        internal static string Exception_NullPrivateKey {
            get {
                return ResourceManager.GetString("Exception_NullPrivateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public key for the assembly &quot;{0}&quot; is null. Make sure the assembly is signed with a strong name..
        /// </summary>
        internal static string Exception_NullPublicKey {
            get {
                return ResourceManager.GetString("Exception_NullPublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly &quot;{0}&quot; is signed with the same key. Validation completed successfully..
        /// </summary>
        internal static string Message_AssemblySignedWithSameKey {
            get {
                return ResourceManager.GetString("Message_AssemblySignedWithSameKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The embedded resource &quot;{0}&quot; not found..
        /// </summary>
        internal static string Message_EmbeddedResourceNotFound {
            get {
                return ResourceManager.GetString("Message_EmbeddedResourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file is empty..
        /// </summary>
        internal static string Message_EmptyFile {
            get {
                return ResourceManager.GetString("Message_EmptyFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registry value is empty..
        /// </summary>
        internal static string Message_EmptyRegistryValue {
            get {
                return ResourceManager.GetString("Message_EmptyRegistryValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license is expired. The expiration date is &quot;{0}&quot;..
        /// </summary>
        internal static string Message_ExpiredLicense {
            get {
                return ResourceManager.GetString("Message_ExpiredLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found..
        /// </summary>
        internal static string Message_FileNotFound {
            get {
                return ResourceManager.GetString("Message_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly data is invalid..
        /// </summary>
        internal static string Message_InvalidAssemblyData {
            get {
                return ResourceManager.GetString("Message_InvalidAssemblyData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine data is invalid..
        /// </summary>
        internal static string Message_InvalidMachineData {
            get {
                return ResourceManager.GetString("Message_InvalidMachineData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The product name &quot;{0}&quot; is invalid..
        /// </summary>
        internal static string Message_InvalidProductName {
            get {
                return ResourceManager.GetString("Message_InvalidProductName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user data is invalid..
        /// </summary>
        internal static string Message_InvalidUserData {
            get {
                return ResourceManager.GetString("Message_InvalidUserData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License Verification Error:
        ///Assembly: {0}
        ///Reason: {1}
        ///Message: {2}
        ///License:
        ///{3} .
        /// </summary>
        internal static string Message_LicenseError {
            get {
                return ResourceManager.GetString("Message_LicenseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no matching license item found for item name &quot;{0}&quot;..
        /// </summary>
        internal static string Message_NoMatchingLicenseItem {
            get {
                return ResourceManager.GetString("Message_NoMatchingLicenseItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly is not properly licensed. The returned license is null..
        /// </summary>
        internal static string Message_NullLicense {
            get {
                return ResourceManager.GetString("Message_NullLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open registry key failed..
        /// </summary>
        internal static string Message_OpenRegistryKeyFailed {
            get {
                return ResourceManager.GetString("Message_OpenRegistryKeyFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading file failed: {0}..
        /// </summary>
        internal static string Message_ReadFileFailed {
            get {
                return ResourceManager.GetString("Message_ReadFileFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed reading registry: {0}..
        /// </summary>
        internal static string Message_ReadResgistryFailed {
            get {
                return ResourceManager.GetString("Message_ReadResgistryFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upgrade expired on &quot;{0}&quot;: cannot use current version released on &quot;{1}&quot;..
        /// </summary>
        internal static string Message_UpgradeExpired {
            get {
                return ResourceManager.GetString("Message_UpgradeExpired", resourceCulture);
            }
        }
    }
}
