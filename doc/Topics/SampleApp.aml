<?xml version="1.0" encoding="utf-8"?>
<topic id="b9c28bee-5509-4ea7-a222-aae9f16336f1" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This walkthrough creates <application>SampleApp</application>, the console
    application consumes the license.</para>
    </introduction>
    <section>
      <title>C#</title>
      <content>
        <procedure>
          <title>Create <application>SampleApp</application> Project</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click the <ui>QuickStart</ui> solution,
              select <ui>Add</ui> -&gt; <ui>New Project...</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp1_Cs" />
                </mediaLink>
                <para>In left side <ui>Project types</ui>, select <ui>Visual C#</ui> -&gt;
	          <ui>Windows</ui>, then select <ui>Console Application</ui> in <ui>Templates</ui>.
	          Enter <userInput>SampleApp</userInput> as <ui>Name</ui>.</para>
                <para>A <ui>SampleApp</ui> console applicaton project created.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Right click the created <ui>SampleApp</ui> project in <ui>Solution Explorer</ui>,
              select <ui>Add</ui> -&gt; <ui>Existing Item:</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp2" />
                </mediaLink>
                <para>Navigate to the file key.snk previously created, click the drop down arrow of button
              <ui>Add</ui>, then click <ui>Add as Link</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Right click <ui>SampleApp</ui> project in <ui>Solution Explorer</ui>,
              select <ui>Properties</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp3" />
                </mediaLink>
                <para>In <ui>Signing</ui> tab,
			  Check <ui>Sign the assembly</ui>, select the previously added <ui>key.snk</ui> file
              from <ui>Choose a strong name key file</ui>.</para>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Add Reference to System.ServiceModel assembly and DevZest.Licensing.dll assembly</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click <ui>SampleApp</ui> project,
              select <ui>References...</ui></para>
                <para>Under <ui>.NET</ui> tab:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp4" />
                </mediaLink>
                <para>Browse to assembly <ui>System.ServiceModel</ui>, and click button <ui>OK</ui>.</para>
                <para>Under <ui>Browse</ui> tab:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp5" />
                </mediaLink>
                <para>Browse to file <ui>DevZest.Licensing.dll</ui> and click button <ui>OK</ui>. This file
              is installed in the <localUri>C:\Program Files\DevZest\.Net Licensing\<replacable>1.0</replacable></localUri>
              folder by default.
              </para>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Add Testing Code</title>
          <steps class="ordered">
            <step>
              <content>
                <para>Enter code in file <ui>Program.cs</ui>:</para>
                  <code language="C#"><![CDATA[
using System;
using System.IO;
using System.Reflection;
using System.ServiceModel;
using DevZest.Licensing;

[assembly: FileLicenseProvider]

namespace SampleApp
{
    static class Program
    {
        // The AssemblyProduct attribute of SampleApp
        private const string Product = "SampleApp";

        // The license item names
        private static class LicenseItems
        {
            public const string Feature1 = "Feature1";
            public const string Feature2 = "Feature2";
        }

        private enum LicenseCategory
        {
            ExpiredEvaluation = 0,
            Evaluation,
            Registered
        }

        private static LicenseKey[] s_licenseKeys = {
            new LicenseKey("6VL8P-QHCRS-PF2GJ-8XLYG-VKHH4"),
            new LicenseKey("ZSWPT-Q3QV8-V9MM9-4WVFA-9Z9CQ"),
            new LicenseKey("XYDSY-LSKC5-9XVSJ-3QYLT-MALBQ") };

        static void Main(string[] args)
        {
            Output();
            for (int input = Input(); input != 0; input = Input())
            {
                GetLicense((LicenseCategory)(input - 1));
                Output();
            }
        }

        private static void GetLicense(LicenseCategory licenseCategory)
        {
            LicenseClient licenseClient = new LicenseClient(LicenseClient.PublicKeyXmlFromAssembly(Assembly.GetExecutingAssembly()));
            try
            {
                LicensePublisherResponse response = licenseClient.GetLicense(
                    Product,
                    Assembly.GetExecutingAssembly().GetName().Version,
                    s_licenseKeys[(int)licenseCategory],
                    licenseCategory.ToString(),
                    "Test User",
                    "Test Company",
                    "testuser@test.com",
                    MachineLicense.LocalMachineData);
                License license = response.License;
                if (license == null)
                    Console.WriteLine("ERROR: " + response.ErrorMessage);
                else
                {
                    File.WriteAllText(Assembly.GetExecutingAssembly().Location + ".lic", license.SignedString);
                    LicenseManager.Reset();
                }

                licenseClient.Close();
            }
            catch (CommunicationException exception)
            {
                Console.WriteLine("EXCEPTION: " + exception.Message);
                licenseClient.Abort();
            }
        }

        private static int Input()
        {
            string[] categories = Enum.GetNames(typeof(LicenseCategory));
            for (int i = 0; i < categories.Length; i++)
                Console.WriteLine(string.Format("{0}: {1} ({2})", i + 1, categories[i], s_licenseKeys[i]));

            Console.WriteLine("0: Exit");
            while (true)
            {
                Console.Write("Please Enter: ");
                string input = Console.ReadLine();
                try
                {
                    int returnValue = Convert.ToInt32(input);
                    if (returnValue >= 0 && returnValue <= categories.Length)
                        return returnValue;
                }
                catch (FormatException)
                {
                }
            }
        }

        private static void Output()
        {
            Console.WriteLine();
            License license = LicenseManager.GetLicense();
            if (license == null)
                Console.WriteLine("This application is not licensed");
            else
            {
                Console.WriteLine("License of this application:");
                Console.WriteLine(license.SignedString);
                OutputLicenseItemValidation(LicenseItems.Feature1);
                OutputLicenseItemValidation(LicenseItems.Feature2);
            }

            Console.WriteLine();
        }

        private static void OutputLicenseItemValidation(string licenseItemName)
        {
            LicenseError licenseError = LicenseManager.Check(licenseItemName);
            Console.Write(licenseItemName + ": ");
            if (licenseError == null)
                Console.WriteLine("A valid license granted");
            else
                Console.WriteLine(string.Format("Cannot grant a valid license, reason=\"{0}\", message=\"{1}\"", licenseError.Reason, licenseError.Message));
        }
    }
}
]]></code>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Configure the Application</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click <ui>SampleApp</ui> project,
              select <ui>Add New Item...</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp6_Cs" />
                </mediaLink>
                <para>In left side <ui>Categories</ui>, select <ui>Visual C# Items</ui>,
	          then select <ui>Application Configuration File</ui> in <ui>Templates</ui>.
	          Don't change the default name <userInput>App.config</userInput>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Enter the following XML in file <ui>App.config</ui>:</para>
                <code language="XML" title="App.config"><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--
  <system.serviceModel>
    <bindings>
      <customBinding>
        <binding name="LicensePublisherSoap12">
          <textMessageEncoding messageVersion="Soap12" writeEncoding="utf-8" />
          <httpTransport />
        </binding>
      </customBinding>
    </bindings>
    <client>
      <endpoint
        address="http://localhost:16885/AsmxPublisher.asmx"
        binding="customBinding" bindingConfiguration="LicensePublisherSoap12"
        contract="DevZest.Licensing.ILicensePublisher" />      
    </client>
  </system.serviceModel>
  -->
  
  <system.serviceModel>
    <client>
      <endpoint
        address="http://localhost:16885/SvcPublisher.svc"
        binding="wsHttpBinding"
        contract="DevZest.Licensing.ILicensePublisher" />
    </client>
  </system.serviceModel>
</configuration>
]]></code>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>
    <section>
      <title>Visual Basic</title>
      <content>
        <procedure>
          <title>Create <application>SampleApp</application> Project</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click the <ui>QuickStart</ui> solution,
              select <ui>Add</ui> -&gt; <ui>New Project...</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp1_Vb" />
                </mediaLink>
                <para>In left side <ui>Project types</ui>, select <ui>Visual Basic</ui> -&gt;
	          <ui>Windows</ui>, then select <ui>Console Application</ui> in <ui>Templates</ui>.
	          Enter <userInput>SampleApp</userInput> as <ui>Name</ui>.</para>
                <para>A <ui>SampleApp</ui> console applicaton project created.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Right click the created <ui>SampleApp</ui> project in <ui>Solution Explorer</ui>,
              select <ui>Add</ui> -&gt; <ui>Existing Item:</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp2" />
                </mediaLink>
                <para>Navigate to the file key.snk previously created, click the drop down arrow of button
              <ui>Add</ui>, then click <ui>Add as Link</ui>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Right click <ui>SampleApp</ui> project in <ui>Solution Explorer</ui>,
              select <ui>Properties</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp3" />
                </mediaLink>
                <para>In <ui>Signing</ui> tab,
			  Check <ui>Sign the assembly</ui>, select the previously added <ui>key.snk</ui> file
              from <ui>Choose a strong name key file</ui>.</para>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Add Reference to System.ServiceModel assembly and DevZest.Licensing.dll assembly</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click <ui>SampleApp</ui> project,
              select <ui>References...</ui></para>
                <para>Under <ui>.NET</ui> tab:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp4" />
                </mediaLink>
                <para>Browse to assembly <ui>System.ServiceModel</ui>, and click button <ui>OK</ui>.</para>
                <para>Under <ui>Browse</ui> tab:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp5" />
                </mediaLink>
                <para>Browse to file <ui>DevZest.Licensing.dll</ui> and click button <ui>OK</ui>. This file
              is installed in the <localUri>C:\Program Files\DevZest\.Net Licensing\<replacable>1.0</replacable></localUri>
              folder by default.
              </para>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Add Testing Code</title>
          <steps class="ordered">
            <step>
              <content>
                <para>Enter code in file <ui>Module1.vb</ui>:</para>
                <code lang="VB.Net">
<![CDATA[
Imports System
Imports System.IO
Imports System.Reflection
Imports System.ServiceModel
Imports DevZest.Licensing

<Assembly: FileLicenseProvider()> 

Module Module1

    ' The AssemblyProduct attribute of SampleApp
    Private Const Product As String = "SampleApp"

    ' The license item names
    Private NotInheritable Class LicenseItems
        Public Const Feature1 As String = "Feature1"
        Public Const Feature2 As String = "Feature2"
    End Class

    Private Enum LicenseCategory
        ExpiredEvaluation = 0
        Evaluation
        Registered
    End Enum

    Private s_licenseKeys As LicenseKey() = { _
        New LicenseKey("6VL8P-QHCRS-PF2GJ-8XLYG-VKHH4"), _
        New LicenseKey("ZSWPT-Q3QV8-V9MM9-4WVFA-9Z9CQ"), _
        New LicenseKey("XYDSY-LSKC5-9XVSJ-3QYLT-MALBQ")}

    Sub Main()
        Output()
        Dim iInput As Integer = Input()
        While iInput <> 0
            GetLicense(CType(iInput - 1, LicenseCategory))
            Output()
            iInput = Input()
        End While
    End Sub

    Private Function Input() As Integer
        Dim categories As String() = [Enum].GetNames(GetType(LicenseCategory))

        For i As Integer = 0 To categories.Length - 1
            Console.WriteLine(String.Format("{0}: {1} ({2})", i + 1, categories(i), s_licenseKeys(i)))
        Next
        Console.WriteLine("0: Exit")
        While (True)
            Console.Write("Please Enter: ")
            Dim strInput As String = Console.ReadLine()
            Try
                Dim returnValue As Integer = Convert.ToInt32(strInput)
                If returnValue >= 0 And returnValue <= categories.Length Then
                    Return returnValue
                End If
            Catch exception As FormatException
            End Try
        End While
    End Function

    Private Sub Output()
        Console.WriteLine()
        Dim lic As License = LicenseManager.GetLicense()
        If lic Is Nothing Then
            Console.WriteLine("This application is not licensed")
        Else
            Console.WriteLine("License of this application:")
            Console.WriteLine(lic.SignedString)
            OutputLicenseItemValidation(LicenseItems.Feature1)
            OutputLicenseItemValidation(LicenseItems.Feature2)
        End If

        Console.WriteLine()
    End Sub

    Private Sub OutputLicenseItemValidation(ByVal licenseItemName As String)
        Dim licError As LicenseError = LicenseManager.Check(licenseItemName)
        Console.Write(licenseItemName + ": ")
        If licError Is Nothing Then
            Console.WriteLine("A valid license granted")
        Else
            Console.WriteLine(String.Format("Cannot grant a valid license, reason=""{0}"", message=""{1}""", licError.Reason, licError.Message))
        End If
    End Sub

    Private Sub GetLicense(ByVal licCategory As LicenseCategory)
        Dim licClient = New LicenseClient(LicenseClient.PublicKeyXmlFromAssembly(Assembly.GetExecutingAssembly()))
        Try
            Dim response As LicensePublisherResponse = licClient.GetLicense( _
                Product, _
                Assembly.GetExecutingAssembly().GetName().Version, _
                s_licenseKeys(CType(licCategory, Integer)), _
                licCategory.ToString(), _
                "Test User", _
                "Test Company", _
                "testuser@test.com", _
                MachineLicense.LocalMachineData)
            Dim lic As License = response.License
            If lic Is Nothing Then
                Console.WriteLine("ERROR: " + response.ErrorMessage)
            Else
                File.WriteAllText(Assembly.GetExecutingAssembly().Location + ".lic", lic.SignedString)
                LicenseManager.Reset()
            End If
            licClient.Close()
        Catch ex As CommunicationException
            Console.WriteLine("EXCEPTION: " + ex.Message)
            licClient.Abort()
        End Try
    End Sub

End Module
]]></code>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure>
          <title>Configure the Application</title>
          <steps class="ordered">
            <step>
              <content>
                <para>In <ui>Solution Explorer</ui>, right click <ui>SampleApp</ui> project,
              select <ui>Add New Item...</ui>:</para>
                <mediaLink>
                  <image xlink:href="QuickStartSampleApp6_Vb" />
                </mediaLink>
                <para>In left side <ui>Categories</ui>, select <ui>Common Items</ui> -&gt; <ui>General</ui>,
	          then select <ui>Application Configuration File</ui> in <ui>Templates</ui>.
	          Don't change the default name <userInput>App.config</userInput>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>Enter the following XML in file <ui>App.config</ui>:</para>
                <code lang="XML" title="App.config"><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--
  <system.serviceModel>
    <bindings>
      <customBinding>
        <binding name="LicensePublisherSoap12">
          <textMessageEncoding messageVersion="Soap12" writeEncoding="utf-8" />
          <httpTransport />
        </binding>
      </customBinding>
    </bindings>
    <client>
      <endpoint
        address="http://localhost:16885/AsmxPublisher.asmx"
        binding="customBinding" bindingConfiguration="LicensePublisherSoap12"
        contract="DevZest.Licensing.ILicensePublisher" />      
    </client>
  </system.serviceModel>
  -->
  
  <system.serviceModel>
    <client>
      <endpoint
        address="http://localhost:16885/SvcPublisher.svc"
        binding="wsHttpBinding"
        contract="DevZest.Licensing.ILicensePublisher" />
    </client>
  </system.serviceModel>
</configuration>
]]></code>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </section>
  </developerWalkthroughDocument>
</topic>