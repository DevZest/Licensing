<?xml version="1.0" encoding="utf-8"?>
<topic id="63538ac6-6912-453d-ba6d-c1f30e0ac0ef" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The default implementation of .Net Licensing can meet most of your requirements, however you still have the freedom
    to extend this component easily by developing custom license, license item or license provider.</para>
    </introduction>
    <section address="Section1">
      <title>Custom License/License Item</title>
      <content>
        <para>To develop custom license, derive your class from <codeEntityReference>T:DevZest.Licensing.License</codeEntityReference> class
      and override <codeEntityReference>M:DevZest.Licensing.License.Validate</codeEntityReference> method.</para>
        <para>To develop custom license item, derive your class from <codeEntityReference>T:DevZest.Licensing.LicenseItem</codeEntityReference> class
      and override <codeEntityReference>M:DevZest.Licensing.LicenseItem.Validate</codeEntityReference> method.</para>
        <para>Your class should:</para>
        <list class="bullet">
          <listItem>
            <para>Be XAML friendly. Since .Net Licensing uses XAML to serialize/deserialize license and license item object, your class must
          be XAML friendly. The following are some rules to writing a XAML friendly class:</para>
            <list class="ordered">
              <listItem>Appropriate namespaces</listItem>
              <listItem>Public, default constructors</listItem>
              <listItem>Public properties for everything you want to expose to the outside world</listItem>
              <listItem>Collections are usually read-only properties</listItem>
              <listItem>Type converters when .NET can't handle the conversion itself</listItem>
            </list>
            <para>For more information, see XAML documentation.</para>
          </listItem>
          <listItem>
            <para>Call <codeEntityReference>M:DevZest.Licensing.Freezable`1.VerifyFrozenAccess</codeEntityReference> method in all
          the public methods and property setters. Before performing the validation on the License or License Item object, the
          license provider seals the object and any attempt to modify the object throws an
          <codeEntityReference>T:System.InvalidOperationException</codeEntityReference>. Your derived classes should respect this rule
          for consistency.</para>
          </listItem>
        </list>
      </content>
    </section>
    <section address="Section2">
      <title>Custom License Provider</title>
      <content>
        <para>To develop custom license provider, derive your class from <codeEntityReference>T:DevZest.Licensing.LicenseProviderAttribute</codeEntityReference> class
      and override <codeEntityReference>M:DevZest.Licensing.LicenseProviderAttribute.ProvideLicense</codeEntityReference> method.</para>
        <para>Your class should call <codeEntityReference>M:DevZest.Licensing.LicenseProviderAttribute.VerifyFrozenAccess</codeEntityReference> method in all
          the public methods and property setters. When initialized during validation, the license provider is sealed and any attempt to
          modify the object throws an <codeEntityReference>T:System.InvalidOperationException</codeEntityReference>. Your derived classes
          should respect this rule for consistency.</para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
         - A local link
         - An external link
         - A code entity reference

    <link xlink:href="Other Topic's ID"/>
    <link xlink:href="Other Topic's ID">Link inner text</link>

    <externalLink>
        <linkText>Link text</linkText>
        <linkAlternateText>Optional alternate link text</linkAlternateText>
        <linkUri>URI</linkUri>
    </externalLink>

    <codeEntityReference>API member ID</codeEntityReference>

    Examples:

    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

    <externalLink>
        <linkText>SHFB on CodePlex</linkText>
        <linkAlternateText>Go to CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SHFB</linkUri>
    </externalLink>

    <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
    <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
    -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>