<?xml version="1.0" encoding="utf-8"?>
<topic id="3603f18f-d504-41fa-8a98-8ad968e2c7a4" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <autoOutline lead="To enable licensing for your assembly:" />
    </introduction>
    <section address="Section0">
      <title>Sign Your Assembly</title>
      <content>
        <para>Your assembly must be signed with a strong name before enabling licensing. For more information on
      how to sign an assembly, refer to the documentation of .Net Framework SDK.</para>
      </content>
    </section>
    <section address="LicensePublicKey">
      <title>Apply LicensePublicKeyAttribute (Partial Trust Only)</title>
      <content>
        <para>
          <codeEntityReference>T:System.Security.Permissions.FileIOPermission</codeEntityReference> is required
  	  to get the public key of the assembly. If you plan to distribute your assembly running under partial trust,
  	  you need to declare the <codeEntityReference>T:DevZest.Licensing.LicensePublicKeyAttribute</codeEntityReference>
  	  for your assembly:</para>
        <code lang="C#"><![CDATA[
			[assembly: LicensePublicKey("0024000004800000940000000602000000240000525341310004000001000100ed58bddcb7bb199ed08c99bd83f732f26d49db4be3ea11c03a0c01bc0774bdcf5bbd3f00fd853f761598dd28489d9849a27e9eb901bb227d2c88b6644bd8e1b1453d021ea6b724995bdc5f839a608a5aa98f2ba6c602d25eaed7147e8046db369ad5ff0847423d926526176ff43902ee012d98f7010a5987448342107eb632b8")]
			]]></code>
        <code lang="VB"><![CDATA[
			<assembly: LicensePublicKey("0024000004800000940000000602000000240000525341310004000001000100ed58bddcb7bb199ed08c99bd83f732f26d49db4be3ea11c03a0c01bc0774bdcf5bbd3f00fd853f761598dd28489d9849a27e9eb901bb227d2c88b6644bd8e1b1453d021ea6b724995bdc5f839a608a5aa98f2ba6c602d25eaed7147e8046db369ad5ff0847423d926526176ff43902ee012d98f7010a5987448342107eb632b8")>
			]]></code>
        <para>Use the command line <application>sn.exe</application> utility to get the public key string from an signed
   	  assembly:</para>
        <command>sn -Tp <replacable>assemblyFile</replacable></command>
      </content>
    </section>
    <section address="Section1">
      <title>Apply LicenseProviderAttribute</title>
      <content>
        <para>You must apply one or more <codeEntityReference>T:DevZest.Licensing.LicenseProviderAttribute</codeEntityReference> to
      specify where the license can be retrieved for your assembly. What attributes to be used should be determined when you
      <link xlink:href="4d81b3c3-dce6-49ea-b4f9-657ac67b65f0" />. For example, .Net Licensing itself has the following license
      providers declared:</para>
        <code lang="C#"><![CDATA[
			[assembly: RegistryLicenseProvider(@"Software\DevZest\.Net Licensing\", "RuntimeLicense")]
            [assembly: AssemblyLicenseProvider(EntryAssemblyOnly=false)]
			]]></code>
        <code lang="VB"><![CDATA[
			<assembly: RegistryLicenseProvider("Software\DevZest\.Net Licensing\", "RuntimeLicense")>
            <assembly: AssemblyLicenseProvider(EntryAssemblyOnly:=false)>
			]]></code>
        <para>.Net Licensing will attempt to load the evaluation or developer license from "RuntimeLicense" value under registry key
   		"HKLM\Software\DevZest\.Net Licensing\X.x", where "X.x" stands for the major and minor version of DevZest.Licensing.dll.
   		If the evaluation or developer license can not be found, it will try to look up a distributable license from the chain of
   		caller assembly.</para>
      </content>
    </section>
    <section address="Section2">
      <title>Call LicenseManager Method</title>
      <content>
        <para>You can then call
      <codeEntityReference autoUpgrade="true">M:DevZest.Licensing.LicenseManager.Validate(System.String)</codeEntityReference> or
      <codeEntityReference autoUpgrade="true">M:DevZest.Licensing.LicenseManager.Check(System.String)</codeEntityReference>
      to determine whether a valid license can be granted for your assembly:</para>
        <code lang="C#"><![CDATA[
      	...
      	LicenseManager.Validate("Your License Item Name");
      	...
			]]></code>
        <code lang="VB"><![CDATA[
      	...
      	LicenseManager.Validate("Your License Item Name")
      	...
			]]></code>
        <para>The <codeEntityReference autoUpgrade="true">M:DevZest.Licensing.LicenseManager.Validate(System.String)</codeEntityReference>
      method throws a <codeEntityReference>T:DevZest.Licensing.LicenseException</codeEntityReference> when a valid license cannot
      be granted where the <codeEntityReference autoUpgrade="true">M:DevZest.Licensing.LicenseManager.Check(System.String)</codeEntityReference>
      method does not.</para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
         - A local link
         - An external link
         - A code entity reference

    <link xlink:href="Other Topic's ID"/>
    <link xlink:href="Other Topic's ID">Link inner text</link>

    <externalLink>
        <linkText>Link text</linkText>
        <linkAlternateText>Optional alternate link text</linkAlternateText>
        <linkUri>URI</linkUri>
    </externalLink>

    <codeEntityReference>API member ID</codeEntityReference>

    Examples:

    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

    <externalLink>
        <linkText>SHFB on CodePlex</linkText>
        <linkAlternateText>Go to CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SHFB</linkUri>
    </externalLink>

    <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
    <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
    -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>