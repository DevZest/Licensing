<?xml version="1.0" encoding="utf-8"?>
<topic id="4d81b3c3-dce6-49ea-b4f9-657ac67b65f0" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The license scheme determines how your software product is being licensed. Since there is virtually
    no way to revoke a published license, plan and design your license scheme carefully in advance. </para>
      <autoOutline />
    </introduction>
    <section address="Section1">
      <title>Mapping License</title>
      <content>
        <para>You can grant different kind of licenses to the user to use your software product. For example,
      you might want to grant a evaluation license to the user to evaluation your software for a certain period,
      or grant a permanent license for paid, registered user with a valid license key. You can also grant
      different license for design time or runtime if you're authoring a component. How many kind of licenses
      you will grant to your software product, together with how you want to manage your license keys, is your
      business decision you have to make before releasing your software.</para>
        <para>For each kind of license you will grant to your user, you need to map it to one
      <codeEntityReference>T:DevZest.Licensing.License</codeEntityReference> object. Different kind of licenses
      can be of different <codeEntityReference>T:DevZest.Licensing.License</codeEntityReference> derived class,
      such as <codeEntityReference>T:DevZest.Licensing.MachineLicense</codeEntityReference>,
      <codeEntityReference>T:DevZest.Licensing.AssemblyLicense</codeEntityReference> or
      <codeEntityReference>T:DevZest.Licensing.UserLicense</codeEntityReference>; or of the same type with
      different property values. For example, .Net Licensing itself has the following licenses mapped:</para>
        <table>
          <row>
            <entry>Evaluation License</entry>
            <entry>
              <para>
                <codeEntityReference>T:DevZest.Licensing.MachineLicense</codeEntityReference> object with 
      	  <codeEntityReference>P:DevZest.Licensing.License.Expiration</codeEntityReference> property set.</para>
              <para>This license can be obtained without a license key, valid on local machine only.</para>
            </entry>
          </row>
          <row>
            <entry>Paid License</entry>
            <entry>
              <para>
                <codeEntityReference>T:DevZest.Licensing.MachineLicense</codeEntityReference> object without 
      	  <codeEntityReference>P:DevZest.Licensing.License.Expiration</codeEntityReference> property set.</para>
              <para>This license can be only be obtained with a valid license key, valid on local machine only.</para>
            </entry>
          </row>
          <row>
            <entry>Distributable License</entry>
            <entry>
              <para>
                <codeEntityReference>T:DevZest.Licensing.AssemblyLicense</codeEntityReference> object.</para>
              <para>This license can be only be obtained with a valid license key, valid for one specific caller assembly
      	  only.</para>
            </entry>
          </row>
        </table>
      </content>
    </section>
    <section address="Section2">
      <title>License Provider</title>
      <content>
        <para>You have to make the decision where to store the license together with your software product. .Net Licensing
   		provides the following license providers:</para>
        <table>
          <row>
            <entry>
              <codeEntityReference>T:DevZest.Licensing.AssemblyLicenseProviderAttribute</codeEntityReference>
            </entry>
            <entry>Provides license from caller assembly.</entry>
          </row>
          <row>
            <entry>
              <codeEntityReference>T:DevZest.Licensing.FileLicenseProviderAttribute</codeEntityReference>
            </entry>
            <entry>Provides license from file. This license provider requires
   				<codeEntityReference>T:System.Security.Permissions.FileIOPermission</codeEntityReference>.</entry>
          </row>
          <row>
            <entry>
              <codeEntityReference>T:DevZest.Licensing.IsolatedStorageFileLicenseProviderAttribute</codeEntityReference>
            </entry>
            <entry>Provides license from isolated storage file.</entry>
          </row>
          <row>
            <entry>
              <codeEntityReference>T:DevZest.Licensing.RegistryLicenseProviderAttribute</codeEntityReference>
            </entry>
            <entry>Provides license from registry. This license provider requires read access of
   				<codeEntityReference>T:System.Security.Permissions.RegistryPermission</codeEntityReference>.</entry>
          </row>
        </table>
        <para>Choose the license providers based on your license types and how your software product is deployed. For example,
   		.Net Licensing itself has the following license providers declared:</para>
        <code lang="C#"><![CDATA[
			[assembly: RegistryLicenseProvider(@"Software\DevZest\.Net Licensing\", "RuntimeLicense")]
            [assembly: AssemblyLicenseProvider(EntryAssemblyOnly=false)]
			]]></code>
        <code lang="VB"><![CDATA[
			<assembly: RegistryLicenseProvider("Software\DevZest\.Net Licensing\", "RuntimeLicense")>
            <assembly: AssemblyLicenseProvider(EntryAssemblyOnly:=false)>
			]]></code>
        <para>.Net Licensing will attempt to load the Product License (Evaluation or Paid License) from "RuntimeLicense" value under registry key
   		"HKLM\Software\DevZest\.Net Licensing\X.x", where "X.x" stands for the major and minor version of DevZest.Licensing.dll.
   		If the evaluation or developer license cannot be found, it will try to look up a Distributable License from the chain of
   		caller assemblies.</para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
         - A local link
         - An external link
         - A code entity reference

    <link xlink:href="Other Topic's ID"/>
    <link xlink:href="Other Topic's ID">Link inner text</link>

    <externalLink>
        <linkText>Link text</linkText>
        <linkAlternateText>Optional alternate link text</linkAlternateText>
        <linkUri>URI</linkUri>
    </externalLink>

    <codeEntityReference>API member ID</codeEntityReference>

    Examples:

    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

    <externalLink>
        <linkText>SHFB on CodePlex</linkText>
        <linkAlternateText>Go to CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SHFB</linkUri>
    </externalLink>

    <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
    <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
    -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>